{"file":"hdc-input.entry.js","mappings":"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","names":[],"sources":["src/components/atoms/hdc-input/hdc-input.scss?tag=hdc-input","src/components/atoms/hdc-input/hdc-input.tsx"],"sourcesContent":["$input-types: (\n  'success': (\n    border-color: rgb(1, 180, 1),\n  ),\n  'danger': (\n    border-color: rgb(214, 30, 30),\n  ),\n  'warning': (\n    border-color: rgb(209, 209, 20),\n  ),\n);\n\n.hdc-input {\n  &-wrapper {\n    width: 100%;\n    box-sizing: border-box;\n    font-family: sans-serif;\n    font-weight: 500;\n    line-height: 22px;\n    font-size: 0.875rem;\n    letter-spacing: 0.02em;\n    position: relative;\n\n    @each $name, $values in $input-types {\n      &--#{$name} {\n        .hdc-input__input {\n          @each $att, $att-value in $values {\n            #{$att}: $att-value;\n          }\n        }\n      }\n    }\n\n    &--icon-right,\n    &--icon-left {\n      .hdc-input__input {\n        padding-left: 1.65rem;\n      }\n    }\n  }\n\n  &-icon {\n    &-left,\n    &-right {\n      position: absolute;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      bottom: 0;\n      top: 0;\n      font-size: 14px;\n      padding: 10px;\n\n      &--pointer {\n        cursor: pointer;\n      }\n    }\n\n    &-left {\n      left: 0;\n    }\n\n    &-right {\n      right: 0;\n    }\n  }\n\n  &__input {\n    display: block;\n    box-sizing: border-box;\n    width: 100%;\n    padding: 0.3rem 1.5rem 0.3rem 0.5rem;\n    font-size: 0.8rem;\n    font-weight: 400;\n    line-height: 1.5;\n    color: #8a92a6;\n    background-color: #fff;\n    -webkit-background-clip: padding-box;\n    background-clip: padding-box;\n    border: 1px solid #eee;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    -webkit-border-radius: 0.25rem;\n    border-radius: 0.25rem;\n    -webkit-box-shadow: 0 0 0 0;\n    box-shadow: 0 0 0 0;\n    -webkit-transition: border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;\n    transition: border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;\n    -o-transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;\n\n    &:disabled {\n      background-color: #e9ecef;\n      cursor: auto;\n    }\n  }\n}\n","import { Component, Element, Event, EventEmitter, Prop, h } from '@stencil/core';\nimport { InputRoleType, InputType } from '@globals/enums';\nimport { getPresentValue, removeDoubleSpaces } from '@utils';\n\n@Component({\n  tag: 'hdc-input',\n  styleUrl: 'hdc-input.scss',\n})\nexport class HdcInput {\n  /**\n   * Element of hdc input\n   */\n  @Element() el: HTMLElement;\n  /**\n   * Prop type of hdc input\n   */\n  @Prop() type: InputType = InputType.DEFAULT;\n  /**\n   * Prop roleType of hdc input\n   */\n  @Prop() roleType: InputRoleType = InputRoleType.TEXT;\n  /**\n   * Prop placeholder of hdc input\n   */\n  @Prop({ mutable: false }) placeholder = '';\n  /**\n   * Prop value of hdc input\n   */\n  @Prop({ mutable: true }) value: string;\n  /**\n   * Prop disable of hdc input\n   */\n  @Prop({ mutable: true }) disable = false;\n  /**\n   * Prop lock of hdc input\n   */\n  @Prop({ mutable: true }) lock = false;\n  /**\n   * Prop lowercase of hdc input\n   */\n  @Prop({ mutable: true }) lowercase = false;\n  /**\n   * Prop uppercase of hdc input\n   */\n  @Prop({ mutable: true }) uppercase = true;\n  /**\n   * Prop icon left of hdc input\n   */\n  @Prop({ mutable: true }) iconLeft: string;\n  /**\n   * Prop color icon left of hdc input\n   */\n  @Prop({ mutable: true }) colorIconLeft = 'dark-charcoal';\n  /**\n   * Prop is clicked icon left of hdc input\n   */\n  @Prop({ mutable: true }) isClickedIconLeft: boolean;\n  /**\n   * Prop is letters of hdc input\n   */\n  @Prop() isLetters: boolean;\n  /**\n   * Prop is alpha numeric of hdc input\n   */\n  @Prop() isAlphanumeric: boolean;\n  /**\n   * Prop name of hdc input\n   */\n  @Prop() name: string;\n  /**\n   * Event change value of ibk input\n   */\n  @Event() changeValue: EventEmitter<string>;\n  /**\n   * Event change blur of ibk input\n   */\n  @Event() changeBlur: EventEmitter<FocusEvent>;\n  /**\n   * Event change keydown of ibk input\n   */\n  @Event() changeKeydown: EventEmitter<KeyboardEvent>;\n  /**\n   * Event change keyup of ibk input\n   */\n  @Event() changeKeyup: EventEmitter<KeyboardEvent>;\n  /**\n   * Event change focus of ibk input\n   */\n  @Event() changeFocus: EventEmitter<FocusEvent>;\n  /**\n   * Event change keyenter of ibk input\n   */\n  @Event() changeEnter: EventEmitter;\n  /**\n   * Event clicked icon of hdc input\n   */\n  @Event() clickedIcon: EventEmitter<'LEFT' | 'RIGHT'>;\n  /**\n   * Regex only letters of hdc input\n   */\n  private regexLetters = /^[a-zA-ZáéíóúÁÉÍÓÚüÜñÑ\\s]+$/;\n  /**\n   * Regex alphanumeric of hdc input\n   */\n  private regexAlphanumeric = /^[a-zA-ZáéíóúÁÉÍÓÚüÜñÑ\\s\\d]+$/;\n  render() {\n    return (\n      <div class={this.getClassWrapper()}>\n        {this.iconLeft && (\n          <div class={this.getClassInputIconLeft()} onClick={() => this.clickedIcon.emit('LEFT')}>\n            <i class={this.getClassIconLeft()}></i>\n          </div>\n        )}\n        <input\n          type={this.roleType}\n          class=\"hdc-input__input\"\n          placeholder={this.placeholder}\n          name={this.name}\n          id={this.name}\n          value={this.value}\n          onInput={(ev) => this.onInputText(ev)}\n          onBlur={(ev) => this.onBlurInput(ev)}\n          onFocus={(ev) => this.onFocusInput(ev)}\n          onKeyDown={(ev) => this.onKeydownInput(ev)}\n          onKeyUp={(ev) => this.onKeyupInput(ev)}\n          disabled={this.disable || this.lock}\n        />\n      </div>\n    );\n  }\n  /**\n   * Determines whether input text on\n   * @param input Event\n   */\n  onInputText(input: InputEvent) {\n    const element = input.target as HTMLInputElement;\n    let value = element.value;\n\n    if (this.lowercase || this.uppercase) {\n      value = removeDoubleSpaces(!this.lowercase ? value.toUpperCase() : value.toLowerCase());\n    }\n\n    if (input.data === '. ') {\n      value = value.replace(/\\. /g, ' ');\n    }\n\n    element.value = value;\n    this.changeValue.emit(removeDoubleSpaces(element.value));\n  }\n\n  /**\n   * Determines whether blur input on\n   * @param event FocusEvent\n   */\n  onBlurInput(event: FocusEvent) {\n    this.changeBlur.emit(event);\n  }\n\n  /**\n   * Determines whether focus input on\n   * @param event FocusEvent\n   */\n  onFocusInput(event: FocusEvent) {\n    this.changeFocus.emit(event);\n  }\n  /**\n   * Determines whether keydown input on\n   * @param event KeyboardEvent\n   */\n  onKeydownInput(event: KeyboardEvent) {\n    if (this.isValidateKey(event)) {\n      this.changeKeydown.emit(event);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Determines whether keyup input on\n   * @param evemt KeyboardEvent\n   */\n  onKeyupInput(event: KeyboardEvent) {\n    if (this.isValidateKey(event)) {\n      this.changeKeyup.emit(event);\n    } else {\n      return;\n    }\n  }\n\n  isValidateKey(event: KeyboardEvent) {\n    const updateValue = getPresentValue(event);\n\n    if (this.isLetters && !this.regexLetters.test(updateValue)) {\n      this.preventDefault(event);\n      return false;\n    }\n\n    if (this.isAlphanumeric && !this.regexAlphanumeric.test(updateValue)) {\n      this.preventDefault(event);\n      return false;\n    }\n\n    return true;\n  }\n\n  preventDefault(event: KeyboardEvent): boolean {\n    event.preventDefault();\n    return false;\n  }\n  /**\n   * Gets class wrapper\n   * @returns { [key: string]: boolean }\n   */\n  getClassWrapper() {\n    return {\n      'hdc-input-wrapper': true,\n      [`hdc-input-wrapper--${this.type}`]: true,\n      [`hdc-input-wrapper--icon-left`]: !!this.iconLeft,\n    };\n  }\n\n  /**\n   * Gets class icon left\n   * @returns { [key: string]: boolean }\n   */\n  getClassIconLeft() {\n    return {\n      'hdc-icon': true,\n      [`hdc-icon-${this.iconLeft}`]: !!this.iconLeft,\n      [`color-${this.colorIconLeft}`]: !!this.colorIconLeft,\n    };\n  }\n\n  /**\n   * Gets class input icon left\n   * @returns { [key: string]: boolean }\n   */\n  getClassInputIconLeft() {\n    return {\n      'hdc-input-icon-left': true,\n      'hdc-input-icon-left--pointer': this.isClickedIconLeft,\n    };\n  }\n}\n"],"version":3}