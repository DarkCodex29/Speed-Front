{"file":"hdc-autocomplete.entry.js","mappings":"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","names":[],"sources":["src/components/atoms/hdc-autocomplete/hdc-autocomplete.scss?tag=hdc-autocomplete","src/components/atoms/hdc-autocomplete/hdc-autocomplete.tsx"],"sourcesContent":[".hdc-input-autocomplete {\n  position: relative;\n\n  .hdc-input__input {\n    padding-right: 25px;\n  }\n\n  &-close {\n    border: 0;\n    padding: 0;\n    line-height: 1;\n    height: 20px;\n    background: transparent;\n    position: absolute;\n    right: 4px;\n    top: 4px;\n    cursor: pointer;\n  }\n\n  &-container {\n    position: absolute;\n    min-width: 100%;\n    z-index: 10;\n    border-radius: 3px;\n\n    &--show {\n      border-top: 1px solid #ced4da;\n    }\n\n    &--top {\n      bottom: 45px;\n\n      .hdc-input-autocomplete-item {\n        border-top: 1px solid #ced4da;\n        border-bottom: unset;\n      }\n    }\n  }\n\n  &-options {\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    overflow: auto;\n\n    &::-webkit-scrollbar {\n      width: 0.5em;\n      border-width: 0 1px 1px 0;\n      border-style: solid;\n      border-color: #ced4da;\n      border-collapse: collapse;\n    }\n\n    &::-webkit-scrollbar-track {\n      border: 1px solid #ccc;\n    }\n     \n    &::-webkit-scrollbar-thumb {\n      background-color: #c49227;\n    }\n  }\n\n  &-item {\n    box-sizing: border-box;\n    font-family: sans-serif;\n    font-weight: 500;\n    font-size: 0.8rem;\n    border: 1px solid #ced4da;\n    background-color: #fff;\n    border-top: unset;\n    list-style-position: outside;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    cursor: pointer;\n    padding: 0px 0.8rem;\n    height: 26px;\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n\n    &:hover, &-active {\n      background-color: #ced4da;\n    }\n  }\n  \n}","import { Component, EventEmitter, Prop, Event, Element, h, State, Listen } from '@stencil/core';\nimport { InputType } from '@globals/enums';\nimport { getValueByPath } from '@utils';\n\n@Component({\n  tag: 'hdc-autocomplete',\n  styleUrl: 'hdc-autocomplete.scss',\n})\nexport class HdcAutocomplete {\n  /**\n   * Element of hdc multiselect\n   */\n  @Element() el: HTMLElement;\n  /**\n   * Prop type of hdc input autocomplete\n   */\n  @Prop() type: InputType = InputType.DEFAULT;\n  /**\n   * Prop value of hdc input autocomplete\n   */\n  @Prop({ mutable: true }) value: string | object | null;\n  /**\n   * Prop disable of hdc input autocomplete\n   */\n  @Prop({ mutable: true }) disable: boolean;\n  /**\n   * Prop lock of hdc input autocomplete\n   */\n  @Prop({ mutable: true }) lock: boolean;\n  /**\n   * Prop placeholder of hdc input autocomplete\n   */\n  @Prop() placeholder: string;\n  /**\n   * Prop items of hdc input autocomplete\n   */\n  @Prop({ mutable: true }) items: Array<string | object> | undefined;\n  /**\n   * Prop view items of hdc input autocomplete\n   */\n  @Prop({ mutable: true }) viewItems: number = 5;\n  /**\n   * Prop key of hdc input autocomplete\n   */\n  @Prop() valueKey = 'name';\n  /**\n   * Prop string of hdc input autocomplete\n   */\n  @Prop() valueLabel = 'name';\n  /**\n   * Event change value of hdc input autocomplete\n   */\n  @Event() selectedValue: EventEmitter<string | object | null>;\n  /**\n   * State filtered items of hdc input autocomplete\n   */\n  @State() filteredItems: Array<string | object> = [];\n  /**\n   * State search text of hdc input autocomplete\n   */\n  @State() searchText = '';\n  /**\n   * State is toggle dropdown of ibk input autocomplete\n   */\n  @State() isToggleDropdown = false;\n\n\n\n  /**\n   * State is index selected\n   */\n  @State() indexSelected = 0;\n  /**\n   * Max height of hdc input autocomplete\n   */\n  maxHeight = 26;\n  /**\n   * Determines whether change value filter options on\n   * @param event CustomEvent\n   */\n  onChangeValueFilterOptions(event: CustomEvent) {\n    this.searchText = event.detail;\n    this.indexSelected = 0;\n    if (this.searchText.length > 2) {\n      this.filteredItems =\n        this.items?.filter((option) => {\n          const label =\n            this.valueLabel && typeof option === 'object' ? option[this.valueLabel] : option;\n\n          return label.toLowerCase().includes(this.searchText.toLowerCase());\n        }) ?? [];\n      this.setToggleDropdown();\n    } else {\n      this.filteredItems = [];\n    }\n  }\n\n  /**\n   * Determines whether click select option on\n   * @param option string\n   */\n  onClickSelectOption(option: string | object) {\n    this.value = option;\n    this.filteredItems = [];\n    this.selectedValue.emit(this.value);\n  }\n  /**\n   * Determines whether clicked icon close on\n   */\n  onClickedIconClose() {\n    this.value = null;\n    this.selectedValue.emit(this.value);\n    this.indexSelected = 0;\n  }\n  /**\n   * Renders hdc input autocomplete\n   * @returns any\n   */\n  render() {\n    return (\n      <div class=\"hdc-input-autocomplete\">\n        <hdc-input\n          type={this.type}\n          placeholder={this.placeholder}\n          disable={this.disable}\n          lock={this.lock}\n          uppercase={false}\n          value={this.getValueKey()}\n          onChangeFocus={() => this.setToggleDropdown()}\n          onChangeValue={(event) => this.onChangeValueFilterOptions(event)}\n        />\n        {this.value && typeof this.value === 'object' && !this.disable &&\n          <button class=\"hdc-input-autocomplete-close\" onClick={() => this.onClickedIconClose()}>\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\" d=\"M6.758 17.243L12.001 12m5.243-5.243L12 12m0 0L6.758 6.757M12.001 12l5.243 5.243\" />\n            </svg>\n          </button>\n        }\n        <div class={this.getClassInputAutocompleteContainr()}>\n          <ul class={this.getClassInputAutocomplete()} style={{ maxHeight: this.getMaxHeight() }}>\n            {this.filteredItems.map((option, index) => (\n              <li\n                key={index}\n                class={this.getClassItemFilter(index)}\n                onClick={() => this.onClickSelectOption(option)}\n              >\n                {this.getStartTyping(option)}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  @Listen('click', { target: 'window' })\n  public handlesBodyClick(ev: Event) {\n    if (!ev.composedPath().includes(this.el)) {\n      this.isToggleDropdown = false;\n      this.indexSelected = 0;\n    }\n  }\n\n  @Listen('keydown')\n  handleKeyDown(ev: KeyboardEvent) {\n    const allowedKeys = ['ArrowDown','ArrowUp','Enter'];\n    if (allowedKeys.includes(ev.key)) {\n      let active = this.el.querySelector('li.hdc-input-autocomplete-item-active') || this.el.querySelector('ul.hdc-input-autocomplete-options li');\n      active?.classList.remove(\"hdc-input-autocomplete-item-active\");\n\n      if (ev.key === 'ArrowDown') {\n        if (this.filteredItems.length > 0 && this.indexSelected < this.filteredItems.length - 1) {\n          this.indexSelected = this.indexSelected + 1;\n        }\n        active = active?.nextElementSibling || active;\n      } else if (ev.key === 'ArrowUp') {\n        if (this.filteredItems.length > 0 && this.indexSelected > 0) {\n          this.indexSelected = this.indexSelected - 1;\n        }\n        active = active?.previousElementSibling || active;\n      } else {\n        active = ev.target as HTMLElement;\n      }\n\n      active?.classList.add('hdc-input-autocomplete-item-active');\n      const container = this.el.querySelector('ul.hdc-input-autocomplete-options');\n      const currentOffset = this.getOffset(container as Element).top + (container?.clientHeight || 0);\n      const nextElement = active?.nextElementSibling || active;\n      const nextBottom = this.getOffset(nextElement as Element).top + (nextElement?.clientHeight || 0)\n      var nextOffset = (container?.scrollTop || 0) + nextBottom - currentOffset;\n      container?.scrollTo({top: nextOffset});\n      \n      if (ev.key === 'Enter') {\n        this.onClickSelectOption(this.filteredItems[this.indexSelected]);\n      }\n    }\n  }\n\n\n  setToggleDropdown() {\n    this.isToggleDropdown = this.filteredItems.length > 0;\n  }\n\n  /**\n   * Gets start typing\n   * @param value string | object\n   * @returns any\n   */\n  getStartTyping(value: string | object) {\n    const label = this.valueLabel && typeof value === 'object' ? value[this.valueLabel] : value;\n\n    return label;\n  }\n  getStyleKeyboard(index: number) {\n    return {\n      'hdc-input-autocomplete-item': true,\n      'hdc-input-autocomplete-item-active': index == this.indexSelected,\n    };\n  }\n  /**\n   * Gets max height\n   * @returns { [key: string]: boolean }\n   */\n  getMaxHeight() {\n    return this.viewItems > 0 ? `${this.maxHeight * this.viewItems}px` : '';\n  }\n\n  /**\n   * Gets class input autocomplete containr\n   * @returns { [key: string]: boolean }\n   */\n  getClassInputAutocompleteContainr() {\n    return {\n      'hdc-input-autocomplete-container': true,\n      'hdc-input-autocomplete-container--top': false,\n      'hdc-input-autocomplete-container--show': this.filteredItems.length > 0\n    };\n  }\n\n  /**\n   * Gets class input autocomplete\n   * @returns { [key: string]: boolean }\n   */\n  getClassInputAutocomplete() {\n    return {\n      'hdc-input-autocomplete-options': true,\n    };\n  }\n\n  getClassItemFilter(index: number) {\n    return {\n      'hdc-input-autocomplete-item': true,\n      'hdc-input-autocomplete-item-active': index === 0,\n    }\n  }\n\n  /**\n   * Gets value key\n   * @returns string\n   */\n  getValueKey() {\n    return (\n      this.valueKey && this.value && typeof this.value === 'object'\n        ? getValueByPath(this.value, this.valueLabel.split('.'))\n        : this.value\n    ) as string;\n  }\n\n  private getOffset(element: Element) {\n    if (!element.getClientRects().length)\n    {\n      return { top: 0, left: 0 };\n    }\n\n    let rect = element.getBoundingClientRect();\n    let win = element.ownerDocument.defaultView;\n    return (\n    {\n      top: rect.top + (win?.scrollY || 0),\n      left: rect.left + (win?.scrollX || 0),\n    });  \n  }\n}"],"version":3}