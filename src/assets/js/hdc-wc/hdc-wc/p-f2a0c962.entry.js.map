{"version":3,"names":["hdcAutocompleteCss","HdcAutocomplete","this","maxHeight","InputType","DEFAULT","onChangeValueFilterOptions","event","searchText","detail","indexSelected","length","filteredItems","_b","_a","items","filter","option","label","valueLabel","toLowerCase","includes","setToggleDropdown","onClickSelectOption","value","selectedValue","emit","onClickedIconClose","render","h","class","type","placeholder","disable","lock","uppercase","getValueKey","onChangeFocus","onChangeValue","onClick","width","height","viewBox","xmlns","fill","stroke","d","getClassInputAutocompleteContainr","getClassInputAutocomplete","style","getMaxHeight","map","index","key","getClassItemFilter","getStartTyping","handlesBodyClick","ev","composedPath","el","isToggleDropdown","handleKeyDown","allowedKeys","active","querySelector","classList","remove","nextElementSibling","previousElementSibling","target","add","container","currentOffset","getOffset","top","clientHeight","nextElement","nextBottom","nextOffset","scrollTop","scrollTo","getStyleKeyboard","viewItems","valueKey","getValueByPath","split","element","getClientRects","left","rect","getBoundingClientRect","win","ownerDocument","defaultView","scrollY","scrollX"],"sources":["src/components/atoms/hdc-autocomplete/hdc-autocomplete.scss?tag=hdc-autocomplete","src/components/atoms/hdc-autocomplete/hdc-autocomplete.tsx"],"sourcesContent":[".hdc-input-autocomplete {\n  position: relative;\n\n  .hdc-input__input {\n    padding-right: 25px;\n  }\n\n  &-close {\n    border: 0;\n    padding: 0;\n    line-height: 1;\n    height: 20px;\n    background: transparent;\n    position: absolute;\n    right: 4px;\n    top: 4px;\n    cursor: pointer;\n  }\n\n  &-container {\n    position: absolute;\n    min-width: 100%;\n    z-index: 10;\n    border-radius: 3px;\n\n    &--show {\n      border-top: 1px solid #ced4da;\n    }\n\n    &--top {\n      bottom: 45px;\n\n      .hdc-input-autocomplete-item {\n        border-top: 1px solid #ced4da;\n        border-bottom: unset;\n      }\n    }\n  }\n\n  &-options {\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    overflow: auto;\n\n    &::-webkit-scrollbar {\n      width: 0.5em;\n      border-width: 0 1px 1px 0;\n      border-style: solid;\n      border-color: #ced4da;\n      border-collapse: collapse;\n    }\n\n    &::-webkit-scrollbar-track {\n      border: 1px solid #ccc;\n    }\n     \n    &::-webkit-scrollbar-thumb {\n      background-color: #c49227;\n    }\n  }\n\n  &-item {\n    box-sizing: border-box;\n    font-family: sans-serif;\n    font-weight: 500;\n    font-size: 0.8rem;\n    border: 1px solid #ced4da;\n    background-color: #fff;\n    border-top: unset;\n    list-style-position: outside;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    cursor: pointer;\n    padding: 0px 0.8rem;\n    height: 26px;\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n\n    &:hover, &-active {\n      background-color: #ced4da;\n    }\n  }\n  \n}","import { Component, EventEmitter, Prop, Event, Element, h, State, Listen } from '@stencil/core';\nimport { InputType } from '@globals/enums';\nimport { getValueByPath } from '@utils';\n\n@Component({\n  tag: 'hdc-autocomplete',\n  styleUrl: 'hdc-autocomplete.scss',\n})\nexport class HdcAutocomplete {\n  /**\n   * Element of hdc multiselect\n   */\n  @Element() el: HTMLElement;\n  /**\n   * Prop type of hdc input autocomplete\n   */\n  @Prop() type: InputType = InputType.DEFAULT;\n  /**\n   * Prop value of hdc input autocomplete\n   */\n  @Prop({ mutable: true }) value: string | object | null;\n  /**\n   * Prop disable of hdc input autocomplete\n   */\n  @Prop({ mutable: true }) disable: boolean;\n  /**\n   * Prop lock of hdc input autocomplete\n   */\n  @Prop({ mutable: true }) lock: boolean;\n  /**\n   * Prop placeholder of hdc input autocomplete\n   */\n  @Prop() placeholder: string;\n  /**\n   * Prop items of hdc input autocomplete\n   */\n  @Prop({ mutable: true }) items: Array<string | object> | undefined;\n  /**\n   * Prop view items of hdc input autocomplete\n   */\n  @Prop({ mutable: true }) viewItems: number = 5;\n  /**\n   * Prop key of hdc input autocomplete\n   */\n  @Prop() valueKey = 'name';\n  /**\n   * Prop string of hdc input autocomplete\n   */\n  @Prop() valueLabel = 'name';\n  /**\n   * Event change value of hdc input autocomplete\n   */\n  @Event() selectedValue: EventEmitter<string | object | null>;\n  /**\n   * State filtered items of hdc input autocomplete\n   */\n  @State() filteredItems: Array<string | object> = [];\n  /**\n   * State search text of hdc input autocomplete\n   */\n  @State() searchText = '';\n  /**\n   * State is toggle dropdown of ibk input autocomplete\n   */\n  @State() isToggleDropdown = false;\n\n\n\n  /**\n   * State is index selected\n   */\n  @State() indexSelected = 0;\n  /**\n   * Max height of hdc input autocomplete\n   */\n  maxHeight = 26;\n  /**\n   * Determines whether change value filter options on\n   * @param event CustomEvent\n   */\n  onChangeValueFilterOptions(event: CustomEvent) {\n    this.searchText = event.detail;\n    this.indexSelected = 0;\n    if (this.searchText.length > 2) {\n      this.filteredItems =\n        this.items?.filter((option) => {\n          const label =\n            this.valueLabel && typeof option === 'object' ? option[this.valueLabel] : option;\n\n          return label.toLowerCase().includes(this.searchText.toLowerCase());\n        }) ?? [];\n      this.setToggleDropdown();\n    } else {\n      this.filteredItems = [];\n    }\n  }\n\n  /**\n   * Determines whether click select option on\n   * @param option string\n   */\n  onClickSelectOption(option: string | object) {\n    this.value = option;\n    this.filteredItems = [];\n    this.selectedValue.emit(this.value);\n  }\n  /**\n   * Determines whether clicked icon close on\n   */\n  onClickedIconClose() {\n    this.value = null;\n    this.selectedValue.emit(this.value);\n    this.indexSelected = 0;\n  }\n  /**\n   * Renders hdc input autocomplete\n   * @returns any\n   */\n  render() {\n    return (\n      <div class=\"hdc-input-autocomplete\">\n        <hdc-input\n          type={this.type}\n          placeholder={this.placeholder}\n          disable={this.disable}\n          lock={this.lock}\n          uppercase={false}\n          value={this.getValueKey()}\n          onChangeFocus={() => this.setToggleDropdown()}\n          onChangeValue={(event) => this.onChangeValueFilterOptions(event)}\n        />\n        {this.value && typeof this.value === 'object' && !this.disable &&\n          <button class=\"hdc-input-autocomplete-close\" onClick={() => this.onClickedIconClose()}>\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\" d=\"M6.758 17.243L12.001 12m5.243-5.243L12 12m0 0L6.758 6.757M12.001 12l5.243 5.243\" />\n            </svg>\n          </button>\n        }\n        <div class={this.getClassInputAutocompleteContainr()}>\n          <ul class={this.getClassInputAutocomplete()} style={{ maxHeight: this.getMaxHeight() }}>\n            {this.filteredItems.map((option, index) => (\n              <li\n                key={index}\n                class={this.getClassItemFilter(index)}\n                onClick={() => this.onClickSelectOption(option)}\n              >\n                {this.getStartTyping(option)}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  @Listen('click', { target: 'window' })\n  public handlesBodyClick(ev: Event) {\n    if (!ev.composedPath().includes(this.el)) {\n      this.isToggleDropdown = false;\n      this.indexSelected = 0;\n    }\n  }\n\n  @Listen('keydown')\n  handleKeyDown(ev: KeyboardEvent) {\n    const allowedKeys = ['ArrowDown','ArrowUp','Enter'];\n    if (allowedKeys.includes(ev.key)) {\n      let active = this.el.querySelector('li.hdc-input-autocomplete-item-active') || this.el.querySelector('ul.hdc-input-autocomplete-options li');\n      active?.classList.remove(\"hdc-input-autocomplete-item-active\");\n\n      if (ev.key === 'ArrowDown') {\n        if (this.filteredItems.length > 0 && this.indexSelected < this.filteredItems.length - 1) {\n          this.indexSelected = this.indexSelected + 1;\n        }\n        active = active?.nextElementSibling || active;\n      } else if (ev.key === 'ArrowUp') {\n        if (this.filteredItems.length > 0 && this.indexSelected > 0) {\n          this.indexSelected = this.indexSelected - 1;\n        }\n        active = active?.previousElementSibling || active;\n      } else {\n        active = ev.target as HTMLElement;\n      }\n\n      active?.classList.add('hdc-input-autocomplete-item-active');\n      const container = this.el.querySelector('ul.hdc-input-autocomplete-options');\n      const currentOffset = this.getOffset(container as Element).top + (container?.clientHeight || 0);\n      const nextElement = active?.nextElementSibling || active;\n      const nextBottom = this.getOffset(nextElement as Element).top + (nextElement?.clientHeight || 0)\n      var nextOffset = (container?.scrollTop || 0) + nextBottom - currentOffset;\n      container?.scrollTo({top: nextOffset});\n      \n      if (ev.key === 'Enter') {\n        this.onClickSelectOption(this.filteredItems[this.indexSelected]);\n      }\n    }\n  }\n\n\n  setToggleDropdown() {\n    this.isToggleDropdown = this.filteredItems.length > 0;\n  }\n\n  /**\n   * Gets start typing\n   * @param value string | object\n   * @returns any\n   */\n  getStartTyping(value: string | object) {\n    const label = this.valueLabel && typeof value === 'object' ? value[this.valueLabel] : value;\n\n    return label;\n  }\n  getStyleKeyboard(index: number) {\n    return {\n      'hdc-input-autocomplete-item': true,\n      'hdc-input-autocomplete-item-active': index == this.indexSelected,\n    };\n  }\n  /**\n   * Gets max height\n   * @returns { [key: string]: boolean }\n   */\n  getMaxHeight() {\n    return this.viewItems > 0 ? `${this.maxHeight * this.viewItems}px` : '';\n  }\n\n  /**\n   * Gets class input autocomplete containr\n   * @returns { [key: string]: boolean }\n   */\n  getClassInputAutocompleteContainr() {\n    return {\n      'hdc-input-autocomplete-container': true,\n      'hdc-input-autocomplete-container--top': false,\n      'hdc-input-autocomplete-container--show': this.filteredItems.length > 0\n    };\n  }\n\n  /**\n   * Gets class input autocomplete\n   * @returns { [key: string]: boolean }\n   */\n  getClassInputAutocomplete() {\n    return {\n      'hdc-input-autocomplete-options': true,\n    };\n  }\n\n  getClassItemFilter(index: number) {\n    return {\n      'hdc-input-autocomplete-item': true,\n      'hdc-input-autocomplete-item-active': index === 0,\n    }\n  }\n\n  /**\n   * Gets value key\n   * @returns string\n   */\n  getValueKey() {\n    return (\n      this.valueKey && this.value && typeof this.value === 'object'\n        ? getValueByPath(this.value, this.valueLabel.split('.'))\n        : this.value\n    ) as string;\n  }\n\n  private getOffset(element: Element) {\n    if (!element.getClientRects().length)\n    {\n      return { top: 0, left: 0 };\n    }\n\n    let rect = element.getBoundingClientRect();\n    let win = element.ownerDocument.defaultView;\n    return (\n    {\n      top: rect.top + (win?.scrollY || 0),\n      left: rect.left + (win?.scrollX || 0),\n    });  \n  }\n}"],"mappings":"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"}