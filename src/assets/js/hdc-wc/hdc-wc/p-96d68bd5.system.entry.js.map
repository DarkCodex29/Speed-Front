{"version":3,"names":["hdcMultiselectCss","HdcMultiselect","exports","this","maxHeight","class_1","prototype","componentWillUpdate","value","valueOptions","onChangeValueFilterOptions","event","_this","searchText","filteredItems","_b","_a","items","filter","option","label","valueLabel","toLowerCase","includes","requestAnimationFrame","list","el","querySelectorAll","forEach","item","checkbox","flag","map","String","valueKey","checked","onClickSelectOption","indexOf","findIndex","push","splice","length","isSelectAll","_c","changeValue","emit","handleOnClick","ev","showDrop","contains","target","render","h","class","disabled","disable","lock","onClick","toggleDrop","getValueText","getClassInputAutocompleteContainer","onInput","onInputText","getClassInputAutocomplete","style","getMaxHeight","type","selectAllOptions","index","key","__spreadArray","input","element","concat","join","viewItems","show"],"sources":["src/components/atoms/hdc-multiselect/hdc-multiselect.scss?tag=hdc-multiselect","src/components/atoms/hdc-multiselect/hdc-multiselect.tsx"],"sourcesContent":[".hdc-multiselect {\n  min-width: 125px;\n  max-width: 100%;\n  font-family: sans-serif;\n  font-size: 1em;\n  box-sizing: border-box;\n  position: relative;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  &-value {\n    display: block;\n    width: 100%;\n    padding: 0.3rem 0.5rem;\n    cursor: pointer;\n    text-align: left;\n    color: #8a92a6;\n    min-height: 29px;\n    overflow: hidden;\n    background-color: #fff;\n    -webkit-background-clip: padding-box;\n    background-clip: padding-box;\n    border: 1px solid #eee;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    -webkit-border-radius: 0.25rem;\n    border-radius: 0.25rem;\n    -webkit-box-shadow: 0 0 0 0;\n    box-shadow: 0 0 0 0;\n    -webkit-transition: border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;\n    transition: border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;\n    -o-transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;\n\n    &[disabled], &:disabled {\n      background-color: #e9ecef;\n      cursor: auto;\n    }\n\n    & > span {\n      text-overflow: ellipsis;\n      display: block;\n      overflow: hidden;\n      white-space: nowrap;\n    }\n  }\n\n  &-container {\n    width: 100%;\n    display: none;\n    position: absolute;\n    z-index: 10;\n    color: #333;\n    overflow: auto;\n    padding: 0px;\n    background: rgb(255, 255, 255);\n    border-width: 1px;\n    border-style: solid;\n    border-color: rgb(170, 170, 170);\n    border-image: initial;\n    border-radius: 4px;\n\n    &::-webkit-scrollbar {\n      width: 0.5em;\n    }\n\n    &::-webkit-scrollbar-track {\n      border-left: 1px solid #ccc;\n    }\n     \n    &::-webkit-scrollbar-thumb {\n      background-color: #c49227;\n    }\n\n    &.show {\n      display: block;\n    }\n\n    &--top {\n      .hdc-input-autocomplete-item {\n        border-top: 1px solid #ced4da;\n        border-bottom: unset;\n      }\n    }\n  }\n\n  &-search {\n    width: 100%;\n    padding: 4px;\n\n    &-input {\n      width: 100%;\n      min-height: 24px;\n      font-size: 0.8rem;\n      box-shadow: none;\n      height: auto !important;\n      padding: 0px 10px 0px 3px;\n      margin: 0px;\n      outline: 0px;\n      border: 1px solid rgb(170, 170, 170);\n      border-radius: 3px;\n    }\n  }\n\n  &-options {\n    overflow: auto;\n    margin: 0px;\n    padding: 5px 8px;\n    width: 100%;\n  }\n\n  &-item {\n    display: list-item;\n    background-image: none;\n    position: static;\n    list-style: none;\n\n    &-label {\n      display: flex;\n      align-items: center;\n    }\n\n    & span {\n      margin-left: 3px;\n      display: inline;\n      white-space: nowrap;\n    }\n\n    & > input {\n      pointer-events: none;\n    }\n  }\n}","import { Component, EventEmitter, Element, Prop, State, Event, h, Listen, Method } from '@stencil/core';\n\n@Component({\n  tag: 'hdc-multiselect',\n  styleUrl: 'hdc-multiselect.scss',\n})\nexport class HdcMultiselect {\n  /**\n   * Element of hdc multiselect\n   */\n  @Element() el: HTMLElement;\n  /**\n   * Prop value of hdc multiselect\n   */\n  @Prop({ mutable: true }) value: Array<string | object> | null;\n  /**\n   * Prop disable of hdc multiselect\n   */\n  @Prop({ mutable: true }) disable: boolean;\n  /**\n   * Prop lock of hdc multiselect\n   */\n  @Prop({ mutable: true }) lock: boolean;\n  /**\n   * Prop items of hdc multiselect\n   */\n  @Prop({ mutable: true }) items: Array<string | object> | undefined;\n  /**\n   * Prop view items of hdc multiselect\n   */\n  @Prop({ mutable: true }) viewItems: number = 8;\n  /**\n   * Prop key of hdc multiselect\n   */\n  @Prop({ mutable: true }) valueKey = 'name';\n  /**\n   * Prop string of hdc multiselect\n   */\n  @Prop() valueLabel = 'name';\n  /**\n   * State filtered items of hdc multiselect\n   */\n  @State() filteredItems: Array<string | object> = [];\n  /**\n   * State search text of hdc multiselect\n   */\n  @State() searchText = '';\n  /**\n   * State search text of hdc multiselect\n   */\n  @State() valueOptions: Array<string | object> | null;\n  /**\n   * State search text of hdc multiselect\n   */\n  @State() showDrop: boolean = false;\n  /**\n   * State search text of hdc multiselect\n   */\n  @State() isSelectAll: boolean = false;\n  /**\n   * Event change value of hdc multiselect\n   */\n  @Event() changeValue: EventEmitter<string | object | null>;\n  /**\n     * Max height of hdc multiselect\n     */\n  maxHeight = 20;\n\n  /**\n   * Determines whether change value filter options on\n   * @param event CustomEvent\n   */\n  componentWillUpdate(){\n    if(!this.value) {\n      this.valueOptions = null;\n      this.value = null;\n    }\n  }\n  onChangeValueFilterOptions(event: string) {\n    this.searchText = event;\n    this.filteredItems =\n      this.items?.filter((option) => {\n        const label =\n          this.valueLabel && typeof option === 'object' ? option[this.valueLabel] : option;\n\n        return label.toLowerCase().includes(this.searchText.toLowerCase());\n      }) ?? [];\n      requestAnimationFrame(() => {\n        const list = this.el.querySelectorAll('input[data-name=\"selectItems\"]');\n        if (list) {\n          list.forEach(item => {\n            const checkbox = item as HTMLInputElement;\n            let flag = this.valueOptions?.map(item => String(item[this.valueKey])).includes(String(checkbox.value));\n            if (flag) {\n              checkbox.checked = true;\n            } else {\n              checkbox.checked = false;\n            }\n          });\n        }        // Do something with liElements\n      });\n  }\n\n  /**\n   * Determines whether click select option on\n   * @param option string\n   */\n  onClickSelectOption(option: string | object) {\n    //Verificamos si ya existen valores seleccionados\n    if (this.valueOptions) {\n      const indexOf = this.valueOptions.findIndex(item => String(item[this.valueKey]) === String(option[this.valueKey]));\n      if (indexOf === -1) {\n        this.valueOptions.push(option);\n      } else {\n        this.valueOptions.splice(indexOf, 1);\n      }\n      if (this.valueOptions.length === 0) {\n        this.valueOptions = null;\n      }\n    } else {\n      this.valueOptions = [option];\n    }\n\n    //Desactivamos el check selectAll \n    const list = this.el.querySelectorAll('input[data-name=\"selectAll\"]');\n    if(list){\n      this.isSelectAll = this.valueOptions?.length === this.items?.length;\n      list.forEach((item: HTMLInputElement) => {\n        item.checked = this.isSelectAll;\n      });\n    }\n    \n    this.value = this.valueOptions?.map(item => item[this.valueKey]) || null;\n    this.changeValue.emit(this.value);\n  }\n\n  @Listen('click', { target: 'window' })\n  handleOnClick(ev) {\n    if (this.showDrop) {\n      if (this.el.contains(ev.target)) {\n        // If click was inside, stop here\n        return;\n      }\n      this.showDrop = false;\n    }\n  }\n\n  render() {\n    return (\n      <div class=\"hdc-multiselect\">\n        <button\n          class=\"hdc-multiselect-value\"\n          disabled={this.disable || this.lock}\n          onClick={() => this.toggleDrop()}>\n          <span>{this.getValueText()}</span>\n        </button>\n        <div\n          class={this.getClassInputAutocompleteContainer()}\n        >\n          <div class=\"hdc-multiselect-search\">\n            <input\n              class=\"hdc-multiselect-search-input\"\n              onInput={ev => this.onInputText(ev)}\n            />\n          </div>\n          <ul class={this.getClassInputAutocomplete()} style={{ maxHeight: this.getMaxHeight() }}>\n            <li class=\"hdc-multiselect-item\">\n              <label class=\"hdc-multiselect-item-label\">\n                <input \n                  type=\"checkbox\" \n                  data-name=\"selectAll\" \n                  onClick={() => this.selectAllOptions()} \n                />\n                <span>{'[Seleccionar Todo]'}</span>\n              </label>\n            </li>\n            {this.filteredItems.map((option, index) => (\n              <li\n                key={index}\n                class=\"hdc-multiselect-item\"\n              >\n                <label class=\"hdc-multiselect-item-label\">\n                  <input \n                    type=\"checkbox\" \n                    data-name=\"selectItems\" \n                    value={option[this.valueKey]} \n                    onClick={() => this.onClickSelectOption(option)} \n                  />\n                  <span>{typeof option === 'object' ? option[this.valueLabel] : option}</span>\n                </label>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  toggleDrop() {\n    if (!this.showDrop) {\n      this.onChangeValueFilterOptions('');\n    }\n    this.showDrop = !this.showDrop;\n  }\n\n  selectAllOptions() {\n    const list = this.el.querySelectorAll('input[data-name=\"selectItems\"]');\n    if (list) {\n      list.forEach(item => {\n        const checkbox = item as HTMLInputElement;\n        if (!this.isSelectAll) {\n          checkbox.checked = true;\n        } else {\n          checkbox.checked = false;\n        }\n      });\n      if (!this.isSelectAll) {\n        this.valueOptions = this.items ? [...this.items] : null;\n      } else {\n        this.valueOptions = null;\n      }\n      this.value = this.valueOptions?.map(item => item[this.valueKey]) || null;\n      this.changeValue.emit(this.value);\n    }\n    this.isSelectAll = !this.isSelectAll;\n  }\n\n  /**\n   * Determines whether input text on\n   * @param input Event\n   */\n  @Method()\n  async onInputText(input: InputEvent) {\n    const element = input.target as HTMLInputElement;\n\n    this.onChangeValueFilterOptions(element.value);\n\n   \n  }\n\n  /**\n   * Gets value text\n   * @returns string\n   */\n  getValueText() {\n    if(this.value) {\n      if(this.isSelectAll) {\n        return 'Todos';\n      } else if(this.value.length > 4) {\n        return `${this.valueOptions?.length} de ${this.items?.length} seleccionados`;\n      }\n\n      return this.valueOptions?.map(item => item[this.valueLabel]).join(', ') || '';\n    }\n    /*\n        this.valueOptions = null;\n    this.value = null;\n    \n    */\n\n    return '-- Seleccione --';\n  }\n\n  /**\n   * Gets max height\n   * @returns { [key: string]: boolean }\n   */\n  getMaxHeight() {\n    return this.viewItems > 0 ? `${(this.maxHeight * this.viewItems) + 40}px` : '';\n  }\n\n  /**\n   * Gets class multiselect container\n   * @returns { [key: string]: boolean }\n   */\n  getClassInputAutocompleteContainer() {\n    return {\n      'hdc-multiselect-container': true,\n      'hdc-multiselect-container--top': true,\n      'show': this.showDrop,\n    };\n  }\n\n  /**\n   * Gets class multiselect\n   * @returns { [key: string]: boolean }\n   */\n  getClassInputAutocomplete() {\n    return {\n      'hdc-multiselect-options': true,\n    };\n  }\n\n}\n"],"mappings":"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"}