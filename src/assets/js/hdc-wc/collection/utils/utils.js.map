{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,MAAM,CAAC,KAAyB,EAAE,MAA0B,EAAE,IAAwB;EACpG,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AACjF,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,eAAe,CAAC,MAAqB;EACnD,MAAM,KAAK,GAAG,MAAM,CAAC,MAA0B,CAAC;EAChD,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;EAC1B,MAAM,cAAc,GAAG,KAAK,CAAC,cAAc,CAAC;EAC5C,MAAM,gBAAgB,GACpB,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,cAAwB,CAAC;IAC5C,MAAM,CAAC,GAAG;IACV,KAAK,CAAC,SAAS,CAAC,cAAwB,CAAC,CAAC;EAE5C,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,kBAAkB,CAAC,KAAa;EAC9C,OAAO,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;AACvC,CAAC;AAED,MAAM,UAAU,cAAc,CAAI,IAAO,EAAE,KAAoB;EAC7D,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;IACtB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;GACvB;EAED,MAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;EACrB,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;EAE1B,IAAI,OAAO,EAAE;IACX,OAAO,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;GAChD;EAED,OAAO,EAAE,CAAC;AACZ,CAAC","sourcesContent":["export function format(first: string | undefined, middle: string | undefined, last: string | undefined): string {\n  return (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');\n}\n\n/**\n * Gets present value\n * @param evento KeyboardEvent\n * @returns string\n */\nexport function getPresentValue(evento: KeyboardEvent): string {\n  const input = evento.target as HTMLInputElement;\n  const valor = input.value;\n  const posicionCursor = input.selectionStart;\n  const valorActualizado =\n    valor.substring(0, posicionCursor as number) +\n    evento.key +\n    valor.substring(posicionCursor as number);\n\n  return valorActualizado;\n}\n\n/**\n * Removes double spaces\n * @param input string\n * @returns string\n */\nexport function removeDoubleSpaces(value: string) {\n  return value.replace(/\\s{2,}/g, ' ');\n}\n\nexport function getValueByPath<T>(data: T, parts: Array<string>): string {\n  if (parts.length === 1) {\n    return data[parts[0]];\n  }\n\n  const key = parts[0];\n  const nextObj = data[key];\n\n  if (nextObj) {\n    return getValueByPath(nextObj, parts.slice(1));\n  }\n\n  return '';\n}"]}